<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paketo Buildpacks</title>
    <link>https://paketo.io/</link>
    <description>Recent content on Paketo Buildpacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://paketo.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Build Java Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/java/</guid>
      <description>This documentation explains how to use the Paketo buildpacks to build Java applications for several common use-cases. For more in-depth description of the buildpacks&amp;rsquo; behavior and configuration see the Paketo Java Buildpack and Paketo Java Native Image Buildpack reference documentation.&#xA;Prerequisites The pack CLI is used throughout the examples. pack is just one of several Cloud Native Buildpack platforms than can execute builds with the Java Buildpacks. For example, Spring Boot developers may want to explore the Spring Boot Maven Plugin or Spring Boot Gradle Plugin .</description>
    </item>
    <item>
      <title>How to Build Node.js Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/nodejs/</guid>
      <description>This documentation explains how to use the Paketo Node.js Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo Node.js Buildpack Reference documentation.&#xA;Build a Sample App To build a sample app locally with this buildpack using the pack CLI, run&#xA;git clone https://github.com/paketo-buildpacks/samples cd samples/nodejs/npm pack build my-app --buildpack paketo-buildpacks/nodejs \ --builder paketobuildpacks/builder-jammy-base Copied! See samples for how to run the app.</description>
    </item>
    <item>
      <title>How to Build .NET Core Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/dotnet-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/dotnet-core/</guid>
      <description>This documentation explains how to use the Paketo .NET Core Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo .NET Core Buildpack Reference documentation.&#xA;Build a Sample App To build your app locally with the buildpack using the pack CLI, run&#xA;git clone https://github.com/paketo-buildpacks/samples cd samples/dotnet-core/aspnet pack build my-app --buildpack paketo-buildpacks/dotnet-core \ --builder paketobuildpacks/builder-jammy-base Copied! See samples for how to run the app.</description>
    </item>
    <item>
      <title>HTTPD Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/httpd-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/httpd-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo HTTPD Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo HTTPD Buildpack How To documentation.&#xA;The HTTPD Paketo Buildpack supports the installation of the Apache HTTP Server binary distribution onto the $PATH inside a container. This makes it available to subsequent buildpacks.&#xA;Supported Dependencies The HTTPD Paketo Buildpack supports several versions of Apache HTTP Server.</description>
    </item>
    <item>
      <title>How to Build Go Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/go/</guid>
      <description>This documentation explains how to use the Paketo Go Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo Go Buildpack Reference documentation.&#xA;Build a Sample Go Application You can quickly build a sample Go app into a runnable OCI image on your local machine with Paketo buildpacks.&#xA;Prerequisites&#xA;docker CLI pack CLI Clone the Paketo samples and navigate to a Go sample app.</description>
    </item>
    <item>
      <title>How to Build Web Servers with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/web-servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/web-servers/</guid>
      <description>This documentation explains how to use Paketo buildpacks to build applications that run web servers like HTTPD and NGINX. These docs focus on explaining common user workflows. For more in-depth description of the buildpacks&amp;rsquo; behavior and configuration, see the reference documentation for each web server buildpack.&#xA;HTTPD This documentation explains how to use the Paketo HTTPD Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo HTTPD Buildpack Reference documentation.</description>
    </item>
    <item>
      <title>How to Build Python Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/python/</guid>
      <description>This documentation explains how to use the Paketo Python Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo Python Buildpack Reference documentation.&#xA;Build a Sample App To build a sample app locally with this buildpack using the pack CLI, run&#xA;git clone https://github.com/paketo-buildpacks/samples cd samples/python/pip pack build my-app --buildpack paketo-buildpacks/python \ --builder paketobuildpacks/builder-jammy-base Copied! See samples for how to run the app.</description>
    </item>
    <item>
      <title>How to Build PHP Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/php/</guid>
      <description>This documentation explains how to use the Paketo PHP Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo PHP Buildpack Reference documentation.&#xA;Build a Sample App To build a sample app locally with this CNB using the pack CLI, run&#xA;git clone https://github.com/paketo-buildpacks/samples cd samples/php/builtin-server pack build my-app --buildpack paketo-buildpacks/php \ --builder paketobuildpacks/builder-jammy-full Copied! See samples for how to run the app.</description>
    </item>
    <item>
      <title>How to Build Ruby Apps with Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/ruby/</guid>
      <description>This documentation explains how to use the Paketo Ruby Buildpack to build applications for several common use-cases. For more in-depth description of the buildpack&amp;rsquo;s behavior and configuration see the Paketo Ruby Buildpack Reference documentation.&#xA;Build a Sample Ruby App You can quickly build a sample Ruby app into a runnable OCI image on your local machine with Paketo buildpacks.&#xA;Prerequisites&#xA;docker CLI pack CLI Clone the Paketo samples and navigate to a Ruby sample app.</description>
    </item>
    <item>
      <title>How To Configure Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/configuration/</guid>
      <description>About the Examples Configuration examples will use the Paketo sample applications.&#xA;Examples assume that the root of this repository is the working directory: git clone https://github.com/paketo-buildpacks/samples cd samples Copied! The pack CLI is used throughout the examples. pack is just one of several Cloud Native Buildpack platforms that can execute builds with Paketo Buildpacks.&#xA;Examples assume that the Paketo Base builder is the default builder: pack config default-builder paketobuildpacks/builder-jammy-base Copied!</description>
    </item>
    <item>
      <title>How to Use Paketo Builders</title>
      <link>https://paketo.io/docs/howto/builders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/builders/</guid>
      <description>Paketo distributes several builders. This documentation explains how to use the Paketo builders to build applications and how create your own builders. For a full list of available Paketo builders, see the Builders reference documentation.&#xA;Use a Paketo builder Paketo provides several builders that are compatible with Paketo buildpacks. You can choose which builder you want to use based on what packages you want available in your stack and which Paketo buildpacks you want to use.</description>
    </item>
    <item>
      <title>How To Use Application Monitoring With Paketo Buildpacks</title>
      <link>https://paketo.io/docs/howto/app-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/app-monitor/</guid>
      <description>This documentation explains how to use the Paketo buildpacks to build applications that include application monitoring tools.&#xA;Apache Skywalking The Apache Skywalking integration is enabled with bindings through the Apache Skywalking Buildpack. If a binding of the correct type, ApacheSkyWalking, is provided at build-time then an agent appropriate for the application will be contributed to the application image.&#xA;Connection credentials will be read from the binding at runtime, with the binding secrets being transformed to system properties with the following the pattern -Dskywalking.</description>
    </item>
    <item>
      <title>Create a Paketo Buildpack</title>
      <link>https://paketo.io/docs/howto/create-paketo-buildpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/create-paketo-buildpack/</guid>
      <description>If the entire Cloud Native Buildpack experience is new to you, you may want to stop and take some time to read about authoring a Cloud Native Buildpack (CNB). Packit is a Go library that is an abstraction that conforms to the CNB specification that takes a minimal approach in terms of the features that are implemented giving a lot of fine control to the buildpack author.&#xA;This tutorial&amp;rsquo;s goal is to take you from nothing to a buildpack that puts a dependency on the filesystem as fast as possible, so with that let&amp;rsquo;s get started!</description>
    </item>
    <item>
      <title>How to Access the Software Bill of Materials</title>
      <link>https://paketo.io/docs/howto/sbom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/sbom/</guid>
      <description>This documentation explains how to access the software bill of materials (SBOM) for an app image built using Paketo buildpacks. For more in-depth field definitions and details check out the software bill of materials concept page.&#xA;Access the Software Bill of Materials on a Sample Application A buildpack can generate SBOMs in different formats. The primary supported SBOMs are in Syft, SPDX, and CycloneDX JSON formats. Paketo buildpacks also generate an SBOM in a Paketo-specific schema, but this SBOM is deprecated.</description>
    </item>
    <item>
      <title>How to Create a Custom Stack</title>
      <link>https://paketo.io/docs/howto/create-custom-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/howto/create-custom-stack/</guid>
      <description>Preface This documentation explains how to create a custom stack based off of the existing Paketo stacks. Check out the stacks concept page for more information about what a stack is and the Paketo offerings.&#xA;It&amp;rsquo;s recommended to use an existent Paketo stack offering, over creating a custom stack in order to leverage the full range of Paketo security patching and compliance standards.&#xA;In some cases, a custom stack image may be useful for users who may need an extra system library or user ID, for example.</description>
    </item>
    <item>
      <title>Buildpacks</title>
      <link>https://paketo.io/docs/concepts/buildpacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/concepts/buildpacks/</guid>
      <description>In this section, we will use the results of the Getting started tutorial with Node.js where a simple app is built using the pack build command.&#xA;This resulted in some output similar to this block:&#xA;... ===&amp;gt; DETECTING paketo-buildpacks/node-engine 0.1.1 paketo-buildpacks/npm-install 0.2.0 paketo-buildpacks/npm-start 0.0.2 ... ===&amp;gt; BUILDING Paketo Node Engine Buildpack 0.1.1 ... Paketo NPM Install Buildpack 0.2.0 ... Paketo NPM Start Buildpack 0.0.2 ... Here we will make sense of this output and explain how the buildpacks detect what dependencies are needed by your app to build it into a runnable app image.</description>
    </item>
    <item>
      <title>Builders</title>
      <link>https://paketo.io/docs/concepts/builders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/concepts/builders/</guid>
      <description>In the Getting Started tutorial, you used the pack CLI and the base builder to create a runnable image with your application. This section explains what builders are and what builders are released by the Paketo project.&#xA;What is a builder? A builder is an image that contains three components:&#xA;a set of buildpacks, which provide your app&amp;rsquo;s dependencies a stack, which provides the OS layer for your app image the CNB lifecycle, which puts everything together to produce your final app image For more information about builders, see buildpacks.</description>
    </item>
    <item>
      <title>Stacks</title>
      <link>https://paketo.io/docs/concepts/stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/concepts/stacks/</guid>
      <description>In the Getting Started tutorial, you used the Paketo builder to build a Node.js app. One of the core pieces to Buildpacks and Builders are Stack Images. Stacks provide the buildpack lifecycle with build-time and run-time environments in the form of images.&#xA;What is a stack? A stack consists of two images:&#xA;build image: the environment in which your app is built run image: the OS layer on which your app runs To learn more about the concept of stacks, see buildpacks.</description>
    </item>
    <item>
      <title>Software Bill of Materials (SBOM)</title>
      <link>https://paketo.io/docs/concepts/sbom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/concepts/sbom/</guid>
      <description>In the Getting Started tutorial, you used the Paketo builder to build a Node.js app. Once you have an app image, you can access metadata about all of the dependencies present in the final app image using the software bill of materials.&#xA;What is the software bill of materials? A software bill of materials (SBOM) is an industry standard mechanism of surfacing metadata about dependencies in images or applications. The metadata consists of various fields such as:</description>
    </item>
    <item>
      <title>.NET Core</title>
      <link>https://paketo.io/getting-started-languages/dotnet_core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/getting-started-languages/dotnet_core/</guid>
      <description>.NET Core Let&amp;rsquo;s use the base Paketo Builder and the pack CLI to build an ASP.NET app as a runnable container image.&#xA;Prerequisites Install Docker by following this guide. Install the pack CLI by following this guide. Build the App Image From Source Code Clone the Paketo samples repository and navigate to the source code for the sample ASP.NET app.&#xA;git clone https://github.com/paketo-buildpacks/samples \ &amp;amp;&amp;amp; cd samples/dotnet-core/aspnet Copied! From the sample app directory, use the pack CLI to build an app image.</description>
    </item>
    <item>
      <title>.NET Core Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/dotnet-core-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/dotnet-core-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo .NET Core buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo .NET Core buildpack How To documentation.&#xA;Supported Dependencies The .NET Core Paketo buildpack supports several versions of the .NET Core Framework. For more details on the specific versions supported in a given buildpack version, see the release notes.</description>
    </item>
    <item>
      <title>Go Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/go-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/go-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Go Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Go Buildpack How To documentation.&#xA;Supported Dependencies The Go Paketo Buildpack supports several versions of Go. For more details on the specific versions supported in a given buildpack version, see the release notes.&#xA;Behavior The Paketo Go Buildpack is a composite buildpack designed to build applications written in Go.</description>
    </item>
    <item>
      <title>Java</title>
      <link>https://paketo.io/getting-started-languages/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/getting-started-languages/java/</guid>
      <description>Java Let&amp;rsquo;s use the base Paketo Builder and the pack CLI to build a Java app as a runnable container image.&#xA;Prerequisites Install Docker by following this guide. Install the pack CLI by following this guide. Build the App Image From Source Code Clone the Paketo samples repository and navigate to the source code for the sample Java app.&#xA;git clone https://github.com/paketo-buildpacks/samples \ &amp;amp;&amp;amp; cd samples/java/maven Copied! From the sample app directory, use the pack CLI to build an app image.</description>
    </item>
    <item>
      <title>Java Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/java-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/java-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Java Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Java Buildpack How To documentation.&#xA;The Paketo Java Buildpack allows users to create an image containing a JVM application from a precompiled artifact or directly from source.&#xA;The Java Buildpack is a composite buildpack and each step in a build is handled by one of its components.</description>
    </item>
    <item>
      <title>Java Native Image Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/java-native-image-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/java-native-image-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Java Native Image Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Java Native Image Buildpack How To documentation.&#xA;The [Paketo Java Native Image Buildpack][bp/java-native-image] allows users to create an image containing a GraalVM native image application. The Java Native Image Buildpack supports the same build tools and configuration options as the Java Buildpack.</description>
    </item>
    <item>
      <title>NGINX Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/nginx-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/nginx-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo NGINX Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo NGINX Buildpack How To documentation.&#xA;The NGINX Paketo Buildpack supports the installation of the NGINX binary distribution onto the $PATH inside a container. This makes it available to subsequent buildpacks.&#xA;Supported Dependencies The NGINX Paketo Buildpack supports several versions of NGINX.</description>
    </item>
    <item>
      <title>Node.js</title>
      <link>https://paketo.io/getting-started-languages/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/getting-started-languages/nodejs/</guid>
      <description>Node.js Let&amp;rsquo;s use the base Paketo Builder and the pack CLI to build a Node.js app as a runnable container image.&#xA;Prerequisites Install Docker by following this guide. Install the pack CLI by following this guide. Build the App Image From Source Code Clone the Paketo samples repository and navigate to the source code for the sample Node.js app.&#xA;git clone https://github.com/paketo-buildpacks/samples \ &amp;amp;&amp;amp; cd samples/nodejs/npm Copied! From the sample app directory, use the pack CLI to build an app image.</description>
    </item>
    <item>
      <title>Node.js Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/nodejs-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/nodejs-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Node.js Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Node.js Buildpack How To documentation.&#xA;Supported Dependencies The Node.js buildpack supports several versions of Node.js. For more details on the specific versions supported in a given buildpack version, see the release notes.&#xA;Supported Service Bindings The Node.js buildpack can be configured using service bindings.</description>
    </item>
    <item>
      <title>Paketo Builders Reference</title>
      <link>https://paketo.io/docs/reference/builders-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/builders-reference/</guid>
      <description>This reference documentation enumerates and briefly describes the available Paketo builders. For explanations of how to use the builders for several common use-cases, see the Paketo Builders How To documentation.&#xA;Available Paketo Builders Name Stack Use cases DockerHub Distribution Github Repository Jammy Full Builder Ubuntu 22.04 PHP, Java, Node.js, Go, Python, .NET Core, Ruby, NGINX, and HTTPD buildpacks and common C libraries. paketobuildpacks/builder-jammy-full https://github.com/paketo-buildpacks/builder-jammy-full Buildpackless Jammy Full Builder Ubuntu 22.04 No buildpacks included.</description>
    </item>
    <item>
      <title>PHP Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/php-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/php-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo PHP Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo PHP Buildpack How To documentation.&#xA;Supported Dependencies The Paketo PHP Buildpack supports several versions of PHP and Composer. For more details on the specific versions supported in a given buildpack version, see the release notes.&#xA;Behavior The Paketo PHP Buildpack is a composite buildpack designed to build applications written in PHP.</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://paketo.io/getting-started-languages/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/getting-started-languages/python/</guid>
      <description>Python Let&amp;rsquo;s use the base Paketo Builder and the pack CLI to build a Python app as a runnable container image.&#xA;Prerequisites Install Docker by following this guide. Install the pack CLI by following this guide. Build the App Image From Source Code Clone the Paketo samples repository and navigate to the source code for the sample Python app.&#xA;git clone https://github.com/paketo-buildpacks/samples \ &amp;amp;&amp;amp; cd samples/python/pipenv Copied! From the sample app directory, use the pack CLI to build an app image.</description>
    </item>
    <item>
      <title>Python Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/python-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/python-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Python Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Python Buildpack How To documentation.&#xA;Supported Dependencies The Python buildpack supports several versions of CPython, as well as tools like Pip and Pipenv. For more details on the specific versions supported in a given buildpack version, see the release notes.</description>
    </item>
    <item>
      <title>Ruby Buildpack Reference</title>
      <link>https://paketo.io/docs/reference/ruby-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://paketo.io/docs/reference/ruby-reference/</guid>
      <description>This reference documentation offers an in-depth description of the behavior and configuration options of the Paketo Ruby Buildpack. For explanations of how to use the buildpack for several common use-cases, see the Paketo Ruby Buildpack How To documentation.&#xA;Supported Dependencies The Ruby Paketo Buildpack supports several versions of MRI, Bundler, and common Ruby webservers and task runners. For more details on the specific versions supported in a given buildpack version, see the release notes.</description>
    </item>
  </channel>
</rss>
